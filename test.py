import cv2
import pytesseract
import numpy as np
import base64
from io import BytesIO
from PIL import Image
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
def base64_to_image(base64_string):
    image_data = base64.b64decode(base64_string)
    image = Image.open(BytesIO(image_data))
    return cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

def preprocess_image(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY_INV)
    return thresh

def extract_numbers(base64_string):
    image = base64_to_image(base64_string)
    processed_image = preprocess_image(image)
    custom_config = r'--oem 3 --psm 6 -c tessedit_char_whitelist=0123456789'
    text = pytesseract.image_to_string(processed_image, config=custom_config)
    return text.strip()

if __name__ == "__main__":
    base64_string = "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"
    base64_string="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"
    base64_string="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"
    numbers = extract_numbers(base64_string)
    print("Extracted Numbers:", numbers)
